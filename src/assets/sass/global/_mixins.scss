//
// Global Mixins
//




@mixin tf-clearfix() {
	&:before,
	&:after {
		content: " "; // 1
		display: table; // 2
	}
	&:after {
		clear: both;
	}
}

@mixin tf-button-reset() {
    appearance: none;
    box-shadow: none;
    border-radius: none;
    border: none;
    cursor: pointer;
    background: none;
    outline: none !important;
    margin: 0;
    padding: 0;
}

@mixin tf-input-reset() {
	border: 0;
	background: none;
	outline: none !important;
	box-shadow: none;
}

@mixin tf-btn-reset() {
    border: 0;
    background: none;
    outline: none !important;
    box-shadow: none;
    outline: none !important;
}

@mixin tf-fix-fixed-position-lags() {
	// webkit hack for smooth font view on fixed positioned elements
	-webkit-backface-visibility:hidden;
	backface-visibility:hidden;
}

@mixin tf-fix-animation-lags() {
    transform: translateZ(0);
    -webkit-transform-style: preserve-3d;
}

@mixin tf-attr($attr, $value, $important: '') {
    @if  $value != null  {
        #{$attr}: #{$value} #{$important};
    }
}

@mixin tf-hack-ie {
	//IE10 and IE11
	@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
		@content;
	}
}

@mixin tf-hack-edge-all {
	@supports (-ms-ime-align:auto) {
		@content;
	}
}

@mixin tf-rounded {
    @if $tf-rounded == true {
       @content;
    }
}

@mixin tf-not-rounded {
    @if $tf-rounded == false {
        @content;
    }
}

// Input placeholder color
@mixin tf-input-placeholder($color) {
    &::-moz-placeholder {
        color: $color;
        opacity: 1;
    }
    // See https://github.com/twbs/bootstrap/pull/11526
    &:-ms-input-placeholder {
        color: $color;
    }
    // Internet Explorer 10+
    &::-webkit-input-placeholder {
        color: $color;
    }
    // Safari and Chrome
}

@mixin tf-hover-transition {
    transition: $tf-transition;

    &:hover {
        transition: $tf-transition;
    }
}

@mixin tf-transition {
    transition: $tf-transition;
}

// Icon Sizing
// SASS Map:  (lineawesome: 1.1rem, fontawesome: 1.2rem, flaticon: 1.1rem)
@mixin tf-icons-size($config) {
    // Lineawesome
    [class^="la-"],
    [class*=" la-"] {
        font-size: tf-get($config, lineawesome);
    }

    // Fontawesome
    [class^="fa-"],
    [class*=" fa-"] {
        font-size: tf-get($config, fontawesome);
    }

    // Flaticon
    [class^="flaticon-"],
    [class*=" flaticon-"],
    [class^="flaticon2-"],
    [class*=" flaticon2-"] {
        font-size: tf-get($config, flaticon);
    }
}

// Icon attr
// SASS Map:  (lineawesome: 1.1rem, fontawesome: 1.2rem, flaticon: 1.1rem)
@mixin tf-icons-style($attr, $config) {
    // lineawesome
    [class^="la-"],
    [class*=" la-"] {
        #{$attr}: tf-get($config, lineawesome);
    }

    // Fontawesome
    [class^="fa-"],
    [class*=" fa-"] {
        #{$attr}: tf-get($config, fontawesome);
    }

    // Flaticon
    [class^="flaticon-"],
    [class*=" flaticon-"],
    [class^="flaticon2-"],
    [class*=" flaticon2-"] {
        #{$attr}: tf-get($config, flaticon);
    }
}

// SASS Map:  (lineawesome: 1.1rem, fontawesome: 1.2rem, flaticon: 1.1rem)
@mixin tf-icons {
    [class^="la-"],
    [class*=" la-"],
    [class^="fa-"],
    [class*=" fa-"],
    [class^="flaticon-"],
    [class*=" flaticon-"],
    [class^="flaticon2-"],
    [class*=" flaticon2-"] {
        @content;
    }
}

// Lineawesome icon
@mixin tf-la-icon($icon) {
    font-family: "LineAwesome";
    text-decoration: inherit;
    text-rendering: optimizeLegibility;
    text-transform: none;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-smoothing: antialiased;

    &:before {
        content: "#{$icon}";
    }
}

@mixin tf-la-icon-change($icon) {
    &:before {
        content: "#{$icon}";
    }
}

@mixin tf-flaticon2-icon($icon) {
    font-family: Flaticon2;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    line-height: 1;
    text-decoration: inherit;
    text-rendering: optimizeLegibility;
    text-transform: none;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-smoothing: antialiased;
    content: "#{$icon}";
}

// Lineawesome icon
@mixin tf-la-icon-self($icon) {
    font-family: "LineAwesome";
    text-decoration: inherit;
    text-rendering: optimizeLegibility;
    text-transform: none;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-smoothing: antialiased;
    content: "#{$icon}";
}

// Close icon
@mixin tf-close-icon($self:null) {
    @if $self == true {
        @include tf-la-icon-self( tf-get($tf-action-icons, close) );
    } @else {
        @include tf-la-icon( tf-get($tf-action-icons, close) );
    }
}

// Arrow icon
@mixin tf-arrow-icon($dir, $self:null) {
    @if $dir == down {
        @if $self == true {
            @include tf-la-icon-self( tf-get($tf-action-icons, down) );
        } @else {
            @include tf-la-icon( tf-get($tf-action-icons, down) );
        }
    }

    @if $dir == up {
        @if $self == true {
            @include tf-la-icon-self( tf-get($tf-action-icons, up) );
        } @else {
            @include tf-la-icon( tf-get($tf-action-icons, up) );
        }
    }

    @if $dir == left {
        @if $self == true {
            @include tf-la-icon-self( tf-get($tf-action-icons, left) );
        } @else {
            @include tf-la-icon( tf-get($tf-action-icons, left) );
        }
    }

    @if $dir == right {
        @if $self == true {
            @include tf-la-icon-self( tf-get($tf-action-icons, right) );
        } @else {
            @include tf-la-icon( tf-get($tf-action-icons, right) );
        }
    }
}

// Svg icon color
@mixin tf-svg-icon-color($color) {
    g {
        [fill] {
            transition: fill 0.3s ease;
            fill: $color;
        }
    }

    &:hover {
        g {
            [fill] {
                transition: fill 0.3s ease;
            }
        }
    }
}

// Breakpoint mixins
// Layout Breakpoints
// Define the minimum and maximum dimensions at which your layout will change, adapting to different screen sizes, for use in media queries.

@mixin tf-media-below($width) {
    @media (max-width: #{tf-media-breakpoint($width)}) {
        @content;
    }
}

@mixin tf-media-above($width) {
    @media (min-width: #{tf-media-breakpoint($width) + 1px}) {
        @content;
    }
}

@mixin tf-media-range($from, $to) {
    @media (min-width: #{tf-media-breakpoint($from) + 1px}) and (max-width: #{tf-media-breakpoint($to)}) {
        @content;
    }
}

@mixin tf-minimal-desktop {
    @media (min-width: #{tf-media-breakpoint(lg) + 1px}) and (max-width: #{tf-media-breakpoint(xl)}) {
        @content;
    }
}

@mixin tf-minimal-desktop-and-below {
    @media (max-width: #{tf-media-breakpoint(xl)}) {
        @content;
    }
}

@mixin tf-desktop {
    @media (min-width: #{tf-media-breakpoint(lg) + 1px}) {
        @content;
    }
}

@mixin tf-desktop-xl {
    @media (min-width: #{tf-media-breakpoint(xl) + 1px}) {
        @content;
    }
}

@mixin tf-desktop-xxl {
    @media (min-width: #{tf-media-breakpoint(xxl) + 1px}) {
        @content;
    }
}

@mixin tf-desktop-and-tablet {
    @media (min-width: #{tf-media-breakpoint(md) + 1px}) {
        @content;
    }
}

@mixin tf-tablet {
    @media (min-width: #{tf-media-breakpoint(md) + 1px}) and (max-width: #{tf-media-breakpoint(lg)}) {
        @content;
    }
}

@mixin tf-tablet-and-mobile {
    @media (max-width: #{tf-media-breakpoint(lg)}) {
        @content;
    }
}

@mixin tf-mobile {
    @media (max-width: #{tf-media-breakpoint(md)}) {
        @content;
    }
}

@mixin tf-mobile-sm {
    @media (max-width: #{tf-media-breakpoint(sm)}) {
        @content;
    }
}

@mixin tf-responsive-below($width) {
    @media (max-width: #{$width}) {
      @content;
    }
}

@mixin tf-responsive-above($width) {
    @media (min-width: #{$width}) {
      @content;
    }
}

@mixin tf-responsive-range($from, $to) {
    @media (min-width: #{$from}) and (max-width: #{$to}) {
      @content;
    }
}
