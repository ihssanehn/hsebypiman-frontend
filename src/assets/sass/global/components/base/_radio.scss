//
// Checkbox
//




// Config
$tf-radio-base-color: tf-base-color(grey, 1);

$tf-radio-config: (
	self: (
		transition: all 0.3s ease,
		size: 18px,
		tick: 6px
	),
	
	outline: (
		border: (
			default: darken($tf-radio-base-color, 12%),
			checked: darken($tf-radio-base-color, 15%)
		),
		tick: darken($tf-radio-base-color, 18%)
	),

	solid: (
		bg: (
			default: darken($tf-radio-base-color, 6%),
			checked: darken($tf-radio-base-color, 8%)
		),
		tick: darken($tf-radio-base-color, 30%)
	)
);

// Base
.tf-radio {
    display: inline-block;
    position: relative;
    padding-left: 30px;
    text-align: left;
    margin-bottom: 10px;
    cursor: pointer;
    font-size: 1rem;
    transition: tf-get($tf-radio-config, self, transition);

    &.tf-radio--disabled {
        opacity: 0.8;
        cursor: not-allowed;
    }

    // Hide default browser input
    > input {
        position: absolute;
        z-index: -1;
        opacity: 0;         
    }

    > span {
        background: none;
        position: absolute;
        top: 1px;
        left: 0;
        height: tf-get($tf-radio-config, self, size);
        width: tf-get($tf-radio-config, self, size);
        border-radius: 50% !important; // Makes radio buttons circlular      

        &:after {
            content:'';
            position: absolute;
            display: none; // Hide check
            top: 50%;
            left: 50%;
            margin-left: -(tf-get($tf-radio-config, self, tick) / 2);
            margin-top: -(tf-get($tf-radio-config, self, tick) / 2);
            width: tf-get($tf-radio-config, self, tick);
            height: tf-get($tf-radio-config, self, tick);
            border-radius: 100% !important;
        }
    }

    > input:checked ~ span {
        transition: tf-get($tf-radio-config, self, transition);
        background: none;     
        &:after {
            display: block;
        }    
    }

    &:hover > input:not([disabled]):checked ~ span,
    > input:checked ~ span {
        transition: tf-get($tf-radio-config, self, transition);

    }

    > input:disabled ~ span {
        opacity: 0.6;
        pointer-events: none;
    }

    &.tf-radio--solid {
        > span {
            border: 1px solid transparent;
        }

        &:hover > input:not([disabled]) ~ span,
        > input:focus ~ span { 
            transition: tf-get($tf-radio-config, self, transition);
        }
    }

    &.tf-radio--square {
        > span {
            border-radius: 0; 
        }       
    }

    &.tf-radio--bold > span {
        border-width: 2px !important; 
        transition: tf-get($tf-radio-config, self, transition);
    }

    .form-inline & {
        margin-left: 15px;
        margin-right: 15px;
    }        

    &.tf-radio--single {
        width: tf-get($tf-radio-config, self, size);
        height: tf-get($tf-radio-config, self, size);

        > span {
            top: 0px;
        }

        th > &, 
        td > & {
            right: -5px;
        }
    }

    // Input group
    .input-group & {
        margin-bottom: 0 !important;
        padding-left: 0;
    }
}

.tf-radio-list {
    padding: 0 0;

    .form-horizontal .form-group & {
        padding-top: 0;
    }

    .tf-radio {
        display: block;  
        text-align: left;

        &:last-child {
            margin-bottom: 5px;
        }
    }   
}

.tf-radio-inline {
    padding: 0 0;

    .tf-radio {
        display: inline-block;
        margin-right: 15px;
        margin-bottom: 5px;

        &:last-child {
            margin-right: 0; 
        }
    }
}

.form-group.row {
    .tf-radio-inline {
        margin-top: 0.75rem; 
    }

    .tf-radio-list {
        margin-top: 2px; 
    }
}

// Skin
@mixin tf-radio-theme(
    $outline-border-color, 
    $outline-border-checked-color, 
    $outline-tick-color, 
    $solid-bg-color, 
    $solid-bg-checked-color, 
    $solid-tick-color) {    

    &.tf-radio--disabled {
        opacity: 0.8;
    }
    
    // Outline
    > span {
        border: 1px solid $outline-border-color; 

        &:after {
            border: solid $outline-tick-color;
            background: $outline-tick-color;
        }
    }

    > input:disabled ~ span {
        &:after {
            border-color: $outline-border-checked-color;
        }
    }

    > input:checked ~ span {
        border: 1px solid $outline-border-checked-color; 
    }

    &.tf-radio--bold > input:checked ~ span {
        border: 2px solid $outline-border-checked-color; 
    }

    > input:disabled ~ span {
        opacity: 0.6;
    }

    // Solid
    &.tf-radio--solid {
        > span {
            background: $solid-bg-color;
            border: 1px solid transparent !important;

            &:after {
                border: solid $solid-tick-color;
                background: $solid-tick-color;
            }
        }


        > input:focus ~ span {  
            border: 1px solid transparent !important;
        }

        > input:checked ~ span {
            background: $solid-bg-checked-color; 
        }
    }

    // Tick
    &.tf-radio--tick {
        > span {
            background: tf-get($tf-checkbox-config, solid, bg, default);
            border: 1px solid transparent !important;
        }
        
        > input:focus ~ span {  
            border: 1px solid transparent !important;
        }

        > input:checked ~ span {
            background: tf-get($tf-checkbox-config, solid, bg, default);

            &:after {
                border: solid $solid-bg-checked-color;
                background: $solid-bg-checked-color;
            }
        }
    }
}

// Default
.tf-radio {
    @include tf-radio-theme(
        tf-get($tf-radio-config, outline, border, default),
        tf-get($tf-radio-config, outline, border, checked),
        tf-get($tf-radio-config, outline, tick),
        tf-get($tf-radio-config, solid, bg, default),
        tf-get($tf-radio-config, solid, bg, checked),
        tf-get($tf-radio-config, solid, tick)
        );

    // State Colors
    @each $name, $color in $tf-state-colors {
        // default state 
        &.tf-radio--#{$name} {
            @include tf-radio-theme(
                tf-get($color, base),
                tf-get($color, base),
                tf-get($color, base),
                tf-get($color, base),
                tf-get($color, base),
                tf-get($color, inverse)
                );
        }
    } 
}