
//
// Option
//




// Base
@mixin tf-option-base() {
    .tf-option  {
        display: flex;       
        padding: 1.4em;        
        border: 1px solid tf-base-color(grey, 2);

        @include tf-rounded {
            border-radius: $tf-border-radius;
        }
        
        .tf-option__control {
        	width: 2.7rem;
            padding-top: 0.1rem;      	

        	.tf-radio {
        		display: block;
        	}
        }

        .tf-option__label {
            width: 100%;

        	.tf-option__head {
        		display: flex;
                justify-content: space-between;                

        		.tf-option__title {
        			font-size: 1.1rem;    
                    font-weight: 400;     	
                    color: tf-base-color(label, 3);
        		}

        		.tf-option__focus {
        			font-size: 1.1rem;
    				font-weight: 500; 		
                    color: tf-base-color(label, 4);
        		}
        	}

        	.tf-option__body {
        		display: block;
        		padding-top: 0.7rem; 
        		font-size: 0.9rem;     	
                color: tf-base-color(label, 2);
        	}
        }

        &.tf-option--plain {
            border: 0;
            padding: 0; 
            margin-top: -0.2rem;
            margin-bottom: 2rem; 
            align-items: center;      

            .tf-option__control {
                vertical-align: middle;                                               
                width: 2.7rem;

                .tf-radio {
                    margin-bottom: 1.6rem;                     
                }
            }

            .tf-option__label {
                .tf-option__head {
                    .tf-option__title {
                                                           
                    }                    
                }

                .tf-option__body {
                    padding-top: 0.2rem;                              
                }
            }
        }

        // Validation 
        .is-valid & {
            border-color: tf-state-color(success, base);
        }

        .is-invalid & {
            border-color: tf-state-color(danger, base);
        }
    }     


}

// Validation State
@mixin tf-option-validation-state($state, $color) {
    .has-#{$state} {
        .tf-option {
            .tf-option__label {
                .tf-option__head {
                    .tf-option__title {
                        color: $color;
                    }
                }
            }
        }
    }
}

// Base
@include tf-option-base();

// Validation States
@include tf-option-validation-state(success, tf-get($tf-state-colors, success, base));
@include tf-option-validation-state(error, tf-get($tf-state-colors, warning, base));